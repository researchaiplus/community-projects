name: Build and deploy Pages

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"
  push:
    branches: [ main, master ]
    paths:
      - 'site/**'
      - '.github/workflows/build-pages.yml'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Pages
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Prepare site folder
        run: |
          mkdir -p site/data

      - name: Fetch repositories by topic
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORG: researchaiplus
          OWNER: ${{ github.repository_owner }}
        run: |
          set -euo pipefail
          ORG="${ORG:-$OWNER}"
          echo "Using org: $ORG"
          mkdir -p tmp site/data
          # Fetch org repositories
          curl -sS -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.mercy-preview+json" \
            "https://api.github.com/search/repositories?q=org:$ORG+topic:research-ai-plus&per_page=100&sort=updated&order=desc" \
            > tmp/_org.json
          # Fetch user repositories from members.txt (optional)
          if [ -f members.txt ]; then
            while read -r user; do
              user="${user%%#*}"; user="$(echo "$user" | xargs)"
              [ -z "$user" ] && continue
              echo "Fetching user: $user"
              curl -sS -H "Authorization: Bearer $GH_TOKEN" \
                -H "Accept: application/vnd.github.mercy-preview+json" \
                "https://api.github.com/search/repositories?q=user:$user+topic:research-ai-plus&per_page=100&sort=updated&order=desc" \
                > "tmp/_user_${user}.json"
            done < members.txt
          fi
          # Combine and dedupe by repo id
          jq -s '{ items: (map(.items // []) | add | unique_by(.id)) }' tmp/*.json > site/data/repos.json
          echo "Saved combined to site/data/repos.json"
          # Enrich with topics per repository to ensure topics are present
          echo "Enriching topics for each repository..."
          TOPICS_ACCEPT="application/vnd.github.mercy-preview+json"
          tmpfile=$(mktemp)
          echo '{"items":[' > "$tmpfile"
          first=1
          jq -cr '.items[] | {id, full_name, html_url, name, owner, description, stargazers_count, updated_at}' site/data/repos.json | while IFS= read -r item; do
            full_name=$(echo "$item" | jq -r '.full_name')
            if [ -z "$full_name" ] || [ "$full_name" = "null" ]; then
              # Skip if missing full_name (should not happen with Search API)
              topics_json='[]'
            else
              topics_json=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: $TOPICS_ACCEPT" \
                "https://api.github.com/repos/$full_name/topics" | jq -c '.names // []')
            fi
            merged=$(jq -c --argjson topics "$topics_json" '. + { topics: $topics }' <<< "$item")
            if [ $first -eq 1 ]; then
              echo "$merged" >> "$tmpfile"; first=0
            else
              echo ",${merged}" >> "$tmpfile"
            fi
          done
          echo ']}' >> "$tmpfile"
          mv "$tmpfile" site/data/repos.json
          echo "Enrichment complete."
          rm -rf tmp

      - name: Generate and commit README stats
        env:
          KEYWORD: ${{ vars.KEYWORD }}
        run: |
          set -euo pipefail
          NOW=$(date -u '+%Y-%m-%d %H:%M UTC')
          KEYWORD="${KEYWORD:-um}"
          TOTAL=$(jq '.items | length' site/data/repos.json)
          UM=$(jq -r --arg kw "$KEYWORD" '[.items[] | select((((.full_name // "") + " " + (.name // "") + " " + (.description // "")) | ascii_downcase) | contains($kw)) ] | length' site/data/repos.json)
          TOPICS_TOTAL=$(jq -r '[.items[].topics[]?] | unique | length' site/data/repos.json)

          {
            echo '## Repo Statistics'
            echo
            echo "- Repositories listed: $TOTAL"
            echo "- Repositories matching \"$KEYWORD\": $UM"
            echo "- Unique topics: $TOPICS_TOTAL"
            echo
            echo 'Top topics:'
            jq -r '[.items[].topics[]?] | group_by(.) | map({topic: (.[0]), count: length}) | sort_by(-.count)[:10] | map("- \(.topic): \(.count)") | .[]' site/data/repos.json
            echo
            echo "_Last updated: $NOW_"
          } > stats_body.md

          if grep -q '<!-- STATS:START -->' README.md; then
            awk 'BEGIN{skip=0} {
              if ($0 ~ /<!-- STATS:START -->/) { print $0; system("cat stats_body.md"); skip=1; next }
              if ($0 ~ /<!-- STATS:END -->/)   { print $0; skip=0; next }
              if (!skip) print $0
            }' README.md > README.md.tmp
            mv README.md.tmp README.md
          else
            {
              echo
              echo '<!-- STATS:START -->'
              cat stats_body.md
              echo '<!-- STATS:END -->'
            } >> README.md
          fi

          rm -f stats_body.md

          git config user.name 'github-actions[bot]'
          git config user.email '41898282+github-actions[bot]@users.noreply.github.com'
          if ! git diff --quiet -- README.md; then
            git add README.md
            git commit -m "docs(readme): update auto stats [skip ci]"
            git push
          else
            echo "README has no changes"
          fi

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Show deployed URL
        run: |
          echo "Pages URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Pages URL: ${{ steps.deployment.outputs.page_url }}" >> "$GITHUB_STEP_SUMMARY"
